"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
# 依赖版本控制
# pip freeze > requirements.txt

from datetime import timedelta
from pathlib import Path


# 获取项目根路径
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# 项目初始默认密钥
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pv3!6^0f(!(!0x)!x)npw2%^l%)6zccrb#p&&%v)9pwrwo86-5'
QINIU_ACCESS_KEY = ''
QINIU_SECRET_KEY = ''
QINIU_BUCKET_NAME = ''

# 是否开启DEBUG模式
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# ================================================= #
# ******************** 应用配置 ******************** #
# ================================================= #

# Application definition
# 系统应用
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'django.contrib.sessions',
    'django.contrib.messages',
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'apps.user'
]
# 博客应用
MY_APPS = [
    'apps.tag'
]

INSTALLED_APPS += MY_APPS

# ================================================= #
# ******************** 中间件配置 ******************* #
# ================================================= #

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 路由入口文件
ROOT_URLCONF = 'application.urls'

# 模板引擎配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ================================================= #
# ******************* WSGI配置 ******************** #
# ================================================= #

WSGI_APPLICATION = 'application.wsgi.application'


# ================================================= #
# ******************* 数据库配置 ******************** #
# ================================================= #

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'sakura3_blog',
        'USER': 'root',
        'PASSWORD': 'Wahaha@123',
        'HOST': 'localhost',  # 数据库主机地址
        'PORT': '3306',       # 数据库端口
    }
}

# ================================================= #
# **************** 密码复杂度校验配置 ***************** #
# ================================================= #

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# ================================================= #
# ****************** 时区国际化配置 ****************** #
# ================================================= #

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# 后端提供静态文件访问服务
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

# 主键默认使用自增字段
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 允许所有域名跨域访问服务
CORS_ALLOW_ALL_ORIGINS = True

# 覆盖django自带的User模型
AUTH_USER_MODEL ='user.User'

# REST_FRAMEWORK配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication'],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "EXCEPTION_HANDLER": 'utils.exception.custom_exception_handler'
}

# JWT配置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=2),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,  # 自动刷新refresh_token
    'BLACKLIST_AFTER_ROTATION': True # 刷新后旧token自动加入黑名单
}
